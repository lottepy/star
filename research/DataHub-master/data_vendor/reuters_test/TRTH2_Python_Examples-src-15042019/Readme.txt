==============================================================================
IMPORTANT NOTICE ON THIS SET OF TRTH PYTHON SAMPLES
==============================================================================
All these samples will work if you have a valid DSS account,
AND it is permissioned for TRTH content.

==============================================================================
1.   INSTRUCTIONS
==============================================================================
This set contains several samples.
They are delivered in 2 formats: notebook (for easy learning) and python code.

Tips to install and run the notebooks:
  1. Install Anaconda: https://www.continuum.io/downloads
  2. Launch Jupyter Notebook
  3. Open the demo sample notebook files (those with extension: .ipynb)
  4. Set the parameters inside the code:
     4.1 Replace "myUserName" and "myPassword" with valid credentials
     4.2 Set the other parameters to valid values ...
  5. Execute each cell using CTRL+<Enter>

Versions:
- Latest update: May 2018 (updated On Demand IntradayBars to handle an initial 200 response)
- All samples were tested with DSS 13.0
- All samples were tested with Anaconda 4.3.1 / Python 3.6 on Windows 7

==============================================================================
2.  NOTES
==============================================================================
- The sample applications require setting 2 parameters:
  user and password (from a valid DSS account).
- The sample applications show how to interact with the TRTH REST API using HTTPS.
- The code is not productized, its purpose is only to demo the API capabilities.
- The same functions can be implemented using other programing languages,
  provided they support HTTP/HTTPS.
- Depending on the amount of requested data, and its own workload, the TRTH
  server may not service an HTTP request in the expected time.
  It thus has an Async mechanism to handle it.
  Instead of returning an HTTTP status 200 OK message, it returns a 202 Accepted.
- Always use the latest set of samples, as enhancements are regularly added.
  This set adds a new sample to retrieve files from a recurring schedule.

==============================================================================
3.  NOTES ON AWS (Amazon Web Services) downloads
==============================================================================
A recent TRTH feature is the possibility to download some extraction data
directly from AWS (the Amazon Web Services cloud, where TRTH it is hosted).
This was initially made possible for VBD (Venue by Day) data in TRTH 11.0.
Since TRTH 11.1 it is also available for data from the following extractions:
- Tick History Time and Sales,
- Tick History Market Depth,
- Tick History Intraday Summaries,
- Tick History Raw reports. 
Caveat: the extraction notes file is not downloadable directly from AWS.

Downloading from AWS is optional but recommended, it delivers faster downloads.
Both samples have a parameter at the start of the code that allows
selecting to download from TRTH (default value) or AWS.

==============================================================================
4.  EXAMPLES INCLUDED
==============================================================================

Authentication
--------------
Both samples cover this topic.

On Demand extractions
---------------------
TRTH_OnDemand_IntradayBars
	Very didactic code, with separate cells for each step.
	Demonstrates an On Demand request, using the following steps:
	- Authentication token request
	- On Demand extraction request
	- Extraction status polling request
	  Extraction notes retrieval
	- Data retrieval and save to disk (the data file is gzipped)
	- Includes AWS download capability

Scheduled extractions
---------------------

TRTH_Get_Latest_Schedule_Files
	Slightly more production oriented, this code features:
	- Functions
	- Basic error handling
	- A single cell

	Purpose:
	- Retrieve & save the latest set of extraction files for a schedule.
	- Display contents of the notes files.

	Pre-requisite:
	- A pre-existing schedule (created manually, or using the API).

	Typical use case:
	- Regular retrieval of files generated by a recurring schedule.
	  Example:
	  - A manually created daily schedule is set to run every day at 1 am.
	  - This code runs every day at 3 am to retrieve the generated files.

	Downloaded files:
	- The extraction file set typically contains:
	  - The "Full" file, containing the requested data
	  - The "Note" file, containing extraction notes, warnings and errors
	  - The "RicMaintenanceNote" file, containing RIC name changes;
	    generated based on a setting in the user preferences, in the GUI.

	Compression:
	- The extraction file compression is defined in the report template.
	  It can be:
	  - None: delivers a text file with extension .csv
	  - ZIP:  delivers a zipped text file with extension .zip
	  - GZIP: delivers a gzipped text file with extension .gz
	  Compression is applied to the "Full" and "RicMaintenanceNote" files.
	  The "Note" file is always a text file with extension .txt
	  This demo code handles all these compression settings.
